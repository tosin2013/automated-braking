apiVersion: v1
kind: ConfigMap
metadata:
  name: data-distance-prediction
  namespace: distance-prediction
  annotations:
    argocd.argoproj.io/sync-wave: "0"
data:
  init.sql: |
    \c distance
    CREATE SCHEMA distance AUTHORIZATION distanceuser;
    create table distance.approaching_vehicle
    (
        image_id                             INTEGER,
        other_bottom                         DECIMAL,
        other_left                           DECIMAL,
        other_right                          DECIMAL,
        other_top                            DECIMAL,
        other_speed                          INTEGER,
        your_speed                           DECIMAL,
        brake_amount                         DECIMAL,
        event_timestamp                      TIMESTAMP,
        created                              TIMESTAMP
    );
    ALTER DATABASE distance OWNER TO distanceuser;
    GRANT ALL PRIVILEGES ON DATABASE distance TO distanceuser;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA distance TO distanceuser;
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: postgresql-data
    app.kubernetes.io/component: postgresql-data
    app.kubernetes.io/instance: postgresql-data
    app.kubernetes.io/name: postgresql-data
    app.kubernetes.io/part-of: postgresql-data
    component: postgresql-data
  name: postgresql-data
  namespace: distance-prediction
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: distance-prediction
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: postgresql
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: distance-prediction
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: postgresql
  template:
    metadata:
      labels:
        name: postgresql
    spec:
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql-data
      containers:
        - env:
            - name: POSTGRESQL_USER
              value: "distanceuser"
            - name: POSTGRESQL_PASSWORD
              value: "distancepass"
            - name: POSTGRESQL_DATABASE
              value: "distance"
          image: "registry.redhat.io/rhel9/postgresql-16:9.6"
          imagePullPolicy: IfNotPresent
          name: postgresql
          ports:
            - containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            requests:
              cpu: "500m"
              memory: 1Gi
            limits:
              cpu: "500m"
              memory: 1Gi
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/pgsql/data
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-database
  namespace: distance-prediction
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  backoffLimit: 5
  selector: {}
  template:
    spec:
      containers:
      - args:
        - -ec
        - |-
          psql postgresql://distanceuser:distancepass@postgresql:5432/distance < /etc/config/init.sql
          sleep 15
        command:
        - /bin/bash
        image: "registry.redhat.io/rhel9/postgresql-16:9.6"
        imagePullPolicy: IfNotPresent
        name: create-database
        volumeMounts:
        - name: data-distance-prediction
          mountPath: /etc/config/
      restartPolicy: OnFailure
      volumes:
      - name: data-distance-prediction
        configMap:
          name: data-distance-prediction

---
